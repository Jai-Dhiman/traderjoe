#!/usr/bin/env bash
# TraderJoe Wrapper Script
# Handles environment setup, Ollama management, and execution

set -euo pipefail

# Get the directory where this script is located
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"

# Load environment variables from .env file
if [[ -f "$PROJECT_ROOT/.env" ]]; then
    set -a
    source "$PROJECT_ROOT/.env"
    set +a
fi

# Color output helpers
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Set up Python environment for PyO3
setup_python_env() {
    log_info "Setting up Python environment..."

    # Find the uv Python installation
    PYTHON_BASE="/Users/jdhiman/.local/share/uv/python/cpython-3.11.14-macos-aarch64-none"
    VENV_PATH="$PROJECT_ROOT/.venv"

    if [[ ! -d "$PYTHON_BASE" ]]; then
        log_error "Python base installation not found at $PYTHON_BASE"
        exit 1
    fi

    if [[ ! -d "$VENV_PATH" ]]; then
        log_error "Virtual environment not found at $VENV_PATH"
        log_info "Run: uv venv && uv pip install sentence-transformers"
        exit 1
    fi

    export PYTHONHOME="$PYTHON_BASE"
    export PYTHONPATH="$VENV_PATH/lib/python3.11/site-packages"
    export PYO3_PYTHON="$VENV_PATH/bin/python"

    log_success "Python environment configured"
}

# Set up database connection
setup_database() {
    log_info "Setting up database connection..."

    export DATABASE_URL="${DATABASE_URL:-postgresql://localhost/traderjoe}"

    # Test database connectivity using psql from homebrew path
    local PSQL_PATH="/opt/homebrew/opt/postgresql@16/bin/psql"
    if [[ ! -x "$PSQL_PATH" ]]; then
        PSQL_PATH="psql"  # Fallback to system psql
    fi

    if ! "$PSQL_PATH" "$DATABASE_URL" -c "SELECT 1" >/dev/null 2>&1; then
        log_warn "Cannot verify database connection (psql test failed)"
        log_info "Continuing anyway - traderjoe will handle connection errors"
    else
        log_success "Database connection verified"
    fi
}

# Global variable to track if we started Ollama
OLLAMA_STARTED_BY_US=false
OLLAMA_PID=""

# Start Ollama if not running
start_ollama() {
    log_info "Checking Ollama status..."

    # Check if Ollama is already running
    if pgrep -x "ollama" >/dev/null; then
        log_success "Ollama is already running (started externally)"
        OLLAMA_STARTED_BY_US=false
        return 0
    fi

    log_info "Starting Ollama for this run..."

    # Start Ollama in the background
    if [[ -x "/opt/homebrew/bin/ollama" ]]; then
        /opt/homebrew/bin/ollama serve >/tmp/ollama-traderjoe.log 2>&1 &
        OLLAMA_PID=$!
        OLLAMA_STARTED_BY_US=true

        log_info "Started Ollama with PID $OLLAMA_PID"

        # Wait for Ollama to be ready (max 30 seconds)
        log_info "Waiting for Ollama to be ready..."
        for i in {1..30}; do
            if curl -s http://localhost:11434/api/tags >/dev/null 2>&1; then
                log_success "Ollama is ready"
                return 0
            fi
            sleep 1
        done

        log_error "Ollama failed to start within 30 seconds"
        exit 1
    else
        log_error "Ollama not found. Please install: brew install ollama"
        exit 1
    fi
}

# Stop Ollama if we started it
stop_ollama() {
    if [[ "$OLLAMA_STARTED_BY_US" == "true" && -n "$OLLAMA_PID" ]]; then
        log_info "Stopping Ollama (PID $OLLAMA_PID)..."

        # Try graceful shutdown first
        if kill "$OLLAMA_PID" 2>/dev/null; then
            # Wait up to 5 seconds for graceful shutdown
            for i in {1..5}; do
                if ! kill -0 "$OLLAMA_PID" 2>/dev/null; then
                    log_success "Ollama stopped gracefully"
                    return 0
                fi
                sleep 1
            done

            # Force kill if still running
            log_warn "Force killing Ollama..."
            kill -9 "$OLLAMA_PID" 2>/dev/null || true
        fi

        log_success "Ollama stopped"
    elif [[ "$OLLAMA_STARTED_BY_US" == "false" ]]; then
        log_info "Ollama was already running - leaving it running"
    fi
}

# Cleanup function to ensure Ollama is stopped on exit
cleanup() {
    local exit_code=$?
    echo
    log_info "Cleaning up..."

    # Only stop Ollama if we started it
    if [[ -z "${SKIP_OLLAMA_MANAGEMENT:-}" ]]; then
        stop_ollama
    fi

    exit $exit_code
}

# Set trap to cleanup on exit, interrupt, or error
trap cleanup EXIT INT TERM

# Ensure required model is available and fully ready
check_ollama_model() {
    local MODEL="${OLLAMA_MODEL:-llama3.2:3b}"
    log_info "Checking for model: $MODEL..."

    # Wait a bit more for Ollama to be fully ready
    sleep 2

    # Try to list models with retries
    local max_retries=3
    for i in $(seq 1 $max_retries); do
        if ollama list >/dev/null 2>&1; then
            break
        fi
        log_info "Waiting for Ollama to be fully ready... (attempt $i/$max_retries)"
        sleep 2
    done

    if ! ollama list | grep -q "$MODEL"; then
        log_warn "Model $MODEL not found. Pulling model..."
        ollama pull "$MODEL"
        log_success "Model $MODEL downloaded"
    else
        log_success "Model $MODEL is available"
    fi

    # Additional wait to ensure Ollama is fully operational
    # This prevents connection errors when TraderJoe immediately tries to use it
    if [[ "$OLLAMA_STARTED_BY_US" == "true" ]]; then
        log_info "Waiting for Ollama to fully initialize (10 seconds)..."
        sleep 10

        # Verify Ollama can actually handle requests
        if curl -s http://localhost:11434/api/tags >/dev/null 2>&1; then
            log_success "Ollama is ready for use (verified with API call)"
        else
            log_warn "Ollama may not be fully ready, but continuing..."
        fi
    fi
}

# Main execution
main() {
    log_info "TraderJoe Wrapper - Starting up..."
    echo

    # Setup environment
    setup_python_env
    setup_database

    # Only manage Ollama if SKIP_OLLAMA_MANAGEMENT is not set
    # This allows batch scripts to manage Ollama once for multiple commands
    if [[ -z "${SKIP_OLLAMA_MANAGEMENT:-}" ]]; then
        start_ollama
        check_ollama_model
    else
        log_info "Ollama management skipped (SKIP_OLLAMA_MANAGEMENT is set)"
    fi

    echo
    log_info "Environment ready. Running TraderJoe..."
    echo "=================================================="
    echo

    # Run the actual TraderJoe binary with all arguments
    # Note: Don't use exec here because we need cleanup to run
    "$PROJECT_ROOT/target/release/traderjoe" "$@"

    # Capture exit code
    local traderjoe_exit=$?

    echo
    echo "=================================================="
    log_info "TraderJoe execution completed with exit code $traderjoe_exit"

    # Exit with the same code (cleanup will run via trap)
    exit $traderjoe_exit
}

# Run main function with all script arguments
main "$@"
