name: Morning Trading Routine

on:
  schedule:
    # Run at 6:30 AM PST (9:30 AM ET) on weekdays
    # PST is UTC-8, so 6:30 AM PST = 14:30 UTC (2:30 PM UTC)
    - cron: '30 14 * * 1-5'
  workflow_dispatch: # Allow manual trigger for testing

env:
  RUST_BACKTRACE: 1
  RUST_LOG: traderjoe=info,sqlx=warn

jobs:
  morning_analysis:
    runs-on: ubuntu-latest
    # Only run on weekdays during market hours
    if: github.event_name == 'workflow_dispatch' || (github.event.schedule && github.event_name == 'schedule')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          # Cache key includes Cargo.lock for dependency changes
          # Automatically handles target/ and ~/.cargo caching
          shared-key: "release"
          cache-on-failure: true

      - name: Build TraderJoe
        env:
          SQLX_OFFLINE: true
        run: cargo build --release

      - name: Test Database Connection
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          echo "🔍 Testing Supabase database connection..."

          if [ -z "$DATABASE_URL" ]; then
            echo "❌ ERROR: DATABASE_URL secret is not set!"
            echo ""
            echo "To fix this:"
            echo "1. Go to your GitHub repo: Settings > Secrets and variables > Actions"
            echo "2. Click 'New repository secret'"
            echo "3. Name: DATABASE_URL"
            echo "4. Value: Your Supabase connection string"
            echo "   Format: postgresql://postgres.[PROJECT_REF]:[PASSWORD]@[HOST]:6543/postgres"
            echo ""
            echo "Get it from: Supabase Project > Settings > Database > Connection String (Session mode)"
            exit 1
          fi

          echo "✅ DATABASE_URL secret is set (length: ${#DATABASE_URL} characters)"
          echo ""

          # Extract host from DATABASE_URL for network testing
          DB_HOST=$(echo "$DATABASE_URL" | sed -E 's|.*@([^:]+):.*|\1|')
          DB_PORT=$(echo "$DATABASE_URL" | sed -E 's|.*:([0-9]+)/.*|\1|')

          echo "📡 Network diagnostics:"
          echo "Host: $DB_HOST"
          echo "Port: $DB_PORT"
          echo ""

          # Check if we can reach the host
          echo "Testing network connectivity to Supabase..."
          if timeout 10 bash -c "cat < /dev/null > /dev/tcp/$DB_HOST/$DB_PORT" 2>/dev/null; then
            echo "✅ Network connection to $DB_HOST:$DB_PORT successful"
          else
            echo "⚠️  Cannot establish TCP connection to $DB_HOST:$DB_PORT"
            echo "This might indicate:"
            echo "  - Supabase firewall blocking GitHub Actions IPs"
            echo "  - Project paused (free tier limitation)"
            echo "  - Wrong host or port"
          fi
          echo ""

          # Check which port is being used
          if [[ "$DB_PORT" == "5432" ]]; then
            echo "⚠️  WARNING: Using port 5432 (direct connection)"
            echo "For GitHub Actions, Supabase recommends port 6543 (connection pooler)"
            echo "Update your DATABASE_URL secret to use port 6543 for better reliability"
            echo ""
          fi

          echo "Testing database connection with actual error output..."
          echo "Running: ./target/release/traderjoe --help"
          echo "----------------------------------------"

          # Run the command and capture full output
          if ./target/release/traderjoe --help 2>&1; then
            echo "----------------------------------------"
            echo "✅ Database connection successful!"
          else
            EXIT_CODE=$?
            echo "----------------------------------------"
            echo "❌ Database connection failed with exit code: $EXIT_CODE"
            echo ""
            echo "Common fixes:"
            echo "1. Use port 6543 (connection pooler) instead of 5432"
            echo "   Format: postgresql://postgres:[PASSWORD]@[HOST]:6543/postgres"
            echo ""
            echo "2. Check Supabase Project Settings:"
            echo "   - Database > Connection Pooling: Ensure it's enabled"
            echo "   - Database > Settings: Check if IPv4 Add-on is enabled (if on free tier)"
            echo "   - Project Settings: Ensure project is not paused"
            echo ""
            echo "3. URL-encode special characters in password if any"
            echo ""
            echo "4. For GitHub Actions, use 'Session' mode connection string from Supabase"
            exit 1
          fi

      - name: Fetch Latest Market Data
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          POLYGON_API_KEY: ${{ secrets.POLYGON_API_KEY }}
          CEREBRAS_API_KEY: ${{ secrets.CEREBRAS_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          EXA_API_KEY: ${{ secrets.EXA_API_KEY }}
          REDDIT_CLIENT_ID: ${{ secrets.REDDIT_CLIENT_ID }}
          REDDIT_CLIENT_SECRET: ${{ secrets.REDDIT_CLIENT_SECRET }}
        run: |
          echo "Fetching market data for SPY..."
          ./target/release/traderjoe fetch --symbol SPY --data-type ohlcv --days 5

      - name: Run Morning Analysis (ACE Pipeline)
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          POLYGON_API_KEY: ${{ secrets.POLYGON_API_KEY }}
          CEREBRAS_API_KEY: ${{ secrets.CEREBRAS_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          EXA_API_KEY: ${{ secrets.EXA_API_KEY }}
          REDDIT_CLIENT_ID: ${{ secrets.REDDIT_CLIENT_ID }}
          REDDIT_CLIENT_SECRET: ${{ secrets.REDDIT_CLIENT_SECRET }}
          PAPER_TRADING: true
        run: |
          echo "Running morning analysis..."
          OUTPUT=$(./target/release/traderjoe analyze --symbol SPY 2>&1)
          echo "$OUTPUT"

          # Save full output to file for next step
          echo "$OUTPUT" > /tmp/analysis_output.txt

      - name: Auto-Execute Trade if Confidence Threshold Met
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          POLYGON_API_KEY: ${{ secrets.POLYGON_API_KEY }}
          CEREBRAS_API_KEY: ${{ secrets.CEREBRAS_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PAPER_TRADING: true
        run: |
          echo "Checking auto-execution criteria..."

          # Confidence threshold (0.50 for learning phase)
          CONFIDENCE_THRESHOLD=0.50

          # Extract recommendation ID
          RECOMMENDATION_ID=$(cat /tmp/analysis_output.txt | grep -oE '[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}' | head -1)

          if [[ -n "$RECOMMENDATION_ID" ]]; then
            echo "Found recommendation ID: $RECOMMENDATION_ID"

            # Extract confidence
            CONFIDENCE=$(cat /tmp/analysis_output.txt | grep -i "confidence" | grep -oE '[0-9]+(\.[0-9]+)?' | head -1)

            if [[ -n "$CONFIDENCE" ]]; then
              # Convert percentage to decimal if needed
              if (( $(echo "$CONFIDENCE > 1" | bc -l) )); then
                CONFIDENCE=$(echo "scale=2; $CONFIDENCE / 100" | bc)
              fi

              echo "Confidence: $CONFIDENCE (threshold: $CONFIDENCE_THRESHOLD)"

              # Execute if confidence meets threshold
              if (( $(echo "$CONFIDENCE >= $CONFIDENCE_THRESHOLD" | bc -l) )); then
                echo "Confidence meets threshold - AUTO-EXECUTING TRADE"
                echo "(Paper trading mode - no real money at risk)"
                ./target/release/traderjoe execute --recommendation-id "$RECOMMENDATION_ID"
              else
                echo "Confidence below threshold - SKIPPING execution"
              fi
            else
              echo "Could not parse confidence - SKIPPING execution"
            fi
          else
            echo "No recommendation ID found - SKIPPING execution"
          fi

      - name: Display Account Status
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          POLYGON_API_KEY: ${{ secrets.POLYGON_API_KEY }}
        run: |
          echo "Current positions:"
          ./target/release/traderjoe positions

      - name: Display ACE Playbook Stats
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          echo "ACE Playbook statistics:"
          ./target/release/traderjoe playbook-stats

      - name: Upload Analysis Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: morning-analysis-logs-${{ github.run_number }}
          path: /tmp/analysis_output.txt
          retention-days: 30
